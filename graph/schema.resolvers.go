package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"fmt"
	"go-microservice/graph/model"
	"io/ioutil"
	"log"
)

// GetHistogram is the resolver for the getHistogram field.
func (r *queryResolver) GetHistogram(ctx context.Context, file model.UploadFile) (*model.JSON, error) {
    fileContent, err := ioutil.ReadAll(file.Image.File)

    if err != nil {
        log.Printf("Error al leer el contenido del archivo DICOM: %v", err)
        errorResponse := model.JSON{
            JSON: string("error"),
        }
        return &errorResponse, err
    }

    histogram := make(map[string]int)
    for _, value := range fileContent {
        if value >= 0 && value <= 255 {
            key := fmt.Sprintf("%d", value)
            histogram[key]++
        }
    }
    histogramJSON, err := json.Marshal(histogram)

    if err != nil {
        log.Printf("Error al convertir el histograma a JSON: %v", err)
        errorResponse := model.JSON{
            JSON: string("error"),
        }
        return &errorResponse, err
    }

    response := model.JSON{
        JSON: string(histogramJSON),
    }

    return &response, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
